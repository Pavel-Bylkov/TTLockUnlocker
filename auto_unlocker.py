"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞ TTLock –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ .env (client_id, client_secret, username, password, lock_id, telegram).
–ï—Å–ª–∏ lock_id –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram –∏ –ø–∏—à—É—Ç—Å—è –≤ –ª–æ–≥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (14 –¥–Ω–µ–π).
"""
import requests
import json
import time
import hashlib
import urllib3
import schedule
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging
from logging.handlers import TimedRotatingFileHandler
import ttlock_api
from typing import Optional, Dict, List, Any, Union

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ ENV_PATH, –∏–Ω–∞—á–µ env/.env
ENV_PATH = os.getenv('ENV_PATH') or 'env/.env'
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(ENV_PATH)

# –£—Ä–æ–≤–µ–Ω—å –æ—Ç–ª–∞–¥–∫–∏
DEBUG = os.getenv('DEBUG', '0').lower() in ('1', 'true', 'yes')

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# TTLock API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
client_id = os.getenv("TTLOCK_CLIENT_ID")
client_secret = os.getenv("TTLOCK_CLIENT_SECRET")
username = os.getenv("TTLOCK_USERNAME")
password = os.getenv("TTLOCK_PASSWORD")

# Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")

REQUIRED_ENV_VARS = [
    'TTLOCK_CLIENT_ID',
    'TTLOCK_CLIENT_SECRET',
    'TTLOCK_USERNAME',
    'TTLOCK_PASSWORD',
    'TELEGRAM_BOT_TOKEN',
    'TELEGRAM_CHAT_ID',
]

missing_vars = [var for var in REQUIRED_ENV_VARS if not os.getenv(var)]
if missing_vars:
    print(f"[ERROR] –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")
    exit(1)

if not all([client_id, client_secret, username, password]):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TTLOCK_CLIENT_ID, TTLOCK_CLIENT_SECRET, TTLOCK_USERNAME, TTLOCK_PASSWORD. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")

# –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∏–º–∏
MAX_RETRIES = 3
RETRY_DELAY = 2
MAX_RETRY_TIME = 21  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (21:00)
RETRY_TIME_SHIFT = 15  # –°–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 15 –º–∏–Ω—É—Ç –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è lock_id, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
LOCK_ID = None

CONFIG_PATH = os.getenv("CONFIG_PATH", "config.json")

LOG_FILENAME = "logs/auto_unlocker.log"
os.makedirs("logs", exist_ok=True)
logger = logging.getLogger("auto_unlocker")
logger.setLevel(logging.INFO)
handler = TimedRotatingFileHandler(LOG_FILENAME, when="midnight", backupCount=14, encoding="utf-8")
formatter = ttlock_api.TZFormatter('%(asctime)s %(levelname)s: %(message)s', '%Y-%m-%d %H:%M:%S')
handler.setFormatter(formatter)
logger.handlers.clear()
logger.addHandler(handler)

def load_config() -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json. –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    
    Returns:
        dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    default = {
        "timezone": "Asia/Novosibirsk",
        "schedule_enabled": True,
        "open_times": {
            "monday": "09:00",
            "tuesday": "09:00",
            "wednesday": "09:00",
            "thursday": "09:00",
            "friday": "09:00",
            "saturday": None,
            "sunday": None
        },
        "breaks": {
            "monday": ["13:00-14:00"],
            "tuesday": [],
            "wednesday": [],
            "thursday": [],
            "friday": [],
            "saturday": [],
            "sunday": []
        }
    }
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return default

def send_telegram_message(text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω –∏ chat_id.
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if not telegram_token or not telegram_chat_id:
        logger.warning("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã, Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
        
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    payload = {
        "chat_id": telegram_chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        resp = requests.post(url, data=payload, timeout=10)
        if resp.status_code != 200:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {resp.text}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {str(e)}")

def debug_request(name: str, url: str, data: Dict[str, Any], response: requests.Response) -> None:
    """
    –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        url: URL –∑–∞–ø—Ä–æ—Å–∞
        data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        response: –û—Ç–≤–µ—Ç requests
    """
    print(f"\n[DEBUG] {name}")
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, ensure_ascii=False)}")
    print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    try:
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {json.dumps(response.json(), ensure_ascii=False)}")
    except Exception:
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ JSON): {response.text}")

def resolve_lock_id(token: str) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å lock_id –∏–∑ .env, –ª–∏–±–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–º–∫–∞ –≤ —Å–ø–∏—Å–∫–µ.
    
    Args:
        token: access_token
    
    Returns:
        str: lock_id –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    lock_id_env = os.getenv("TTLOCK_LOCK_ID")
    if lock_id_env:
        if DEBUG:
            print(f"lock_id –Ω–∞–π–¥–µ–Ω –≤ .env: {lock_id_env}")
        logger.info(f"lock_id –Ω–∞–π–¥–µ–Ω –≤ .env: {lock_id_env}")
        send_telegram_message(f"‚ÑπÔ∏è lock_id –Ω–∞–π–¥–µ–Ω –≤ .env: <code>{lock_id_env}</code>")
        return lock_id_env
        
    locks = ttlock_api.list_locks(token)
    if not locks:
        msg = "–ó–∞–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
        print(msg)
        logger.error(msg)
        send_telegram_message(f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –∑–∞–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>")
        return None
        
    first_lock = locks[0]
    lock_id = first_lock.get('lockId')
    msg = f"lock_id –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: {lock_id}"
    print(msg)
    logger.info(msg)
    send_telegram_message(f"‚ÑπÔ∏è lock_id –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: <code>{lock_id}</code>")
    return lock_id

def job() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º.
    """
    global LOCK_ID
    now = ttlock_api.get_now()
    now_str = now.strftime('%Y-%m-%d %H:%M:%S')
    msg = f"\n[{now_str}] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞..."
    print(msg)
    logger.info(msg)
    send_telegram_message(f"üîî <b>–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞</b>\n{now_str}")
    
    token = ttlock_api.get_token(logger)
    if not token:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –∑–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
        print(msg)
        logger.error(msg)
        send_telegram_message(f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω</b>")
        return

    if LOCK_ID is None:
        LOCK_ID = resolve_lock_id(token)
        if not LOCK_ID:
            msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å lock_id, –∑–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
            print(msg)
            logger.error(msg)
            send_telegram_message(f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å lock_id</b>")
            return

    result = ttlock_api.unlock_lock(token, LOCK_ID, logger, send_telegram_message)
    if not result.get("success"):
        msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫ –ø–æ—Å–ª–µ {result.get('attempt')} –ø–æ–ø—ã—Ç–æ–∫."
        print(msg)
        logger.error(msg)
        send_telegram_message(f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: {msg}</b>")
        return

    msg = f"‚úÖ –ó–∞–º–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç (–ø–æ–ø—ã—Ç–∫–∞ {result.get('attempt')})"
    print(msg)
    logger.info(msg)
    send_telegram_message(f"‚úÖ <b>–ó–∞–º–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç</b>\n–ü–æ–ø—ã—Ç–∫–∞: {result.get('attempt')}")

def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    """
    config = load_config()
    if not config.get("schedule_enabled", True):
        msg = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        print(msg)
        logger.info(msg)
        send_telegram_message(f"‚ÑπÔ∏è <b>{msg}</b>")
        return

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    for day, time in config.get("open_times", {}).items():
        if not time:
            continue
            
        # –ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
        schedule.every().monday.at(time).do(job) if day == "monday" else None
        schedule.every().tuesday.at(time).do(job) if day == "tuesday" else None
        schedule.every().wednesday.at(time).do(job) if day == "wednesday" else None
        schedule.every().thursday.at(time).do(job) if day == "thursday" else None
        schedule.every().friday.at(time).do(job) if day == "friday" else None
        schedule.every().saturday.at(time).do(job) if day == "saturday" else None
        schedule.every().sunday.at(time).do(job) if day == "sunday" else None

        # –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        breaks = config.get("breaks", {}).get(day, [])
        for break_time in breaks:
            start_time, end_time = break_time.split("-")
            
            def make_close(day=day):
                def _close():
                    token = ttlock_api.get_token(logger)
                    if token and LOCK_ID:
                        ttlock_api.lock_lock(token, LOCK_ID, logger, send_telegram_message)
                return _close

            def make_reopen(day=day):
                def _open():
                    token = ttlock_api.get_token(logger)
                    if token and LOCK_ID:
                        ttlock_api.unlock_lock(token, LOCK_ID, logger, send_telegram_message)
                return _open

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
            schedule.every().monday.at(start_time).do(make_close()) if day == "monday" else None
            schedule.every().tuesday.at(start_time).do(make_close()) if day == "tuesday" else None
            schedule.every().wednesday.at(start_time).do(make_close()) if day == "wednesday" else None
            schedule.every().thursday.at(start_time).do(make_close()) if day == "thursday" else None
            schedule.every().friday.at(start_time).do(make_close()) if day == "friday" else None
            schedule.every().saturday.at(start_time).do(make_close()) if day == "saturday" else None
            schedule.every().sunday.at(start_time).do(make_close()) if day == "sunday" else None

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
            schedule.every().monday.at(end_time).do(make_reopen()) if day == "monday" else None
            schedule.every().tuesday.at(end_time).do(make_reopen()) if day == "tuesday" else None
            schedule.every().wednesday.at(end_time).do(make_reopen()) if day == "wednesday" else None
            schedule.every().thursday.at(end_time).do(make_reopen()) if day == "thursday" else None
            schedule.every().friday.at(end_time).do(make_reopen()) if day == "friday" else None
            schedule.every().saturday.at(end_time).do(make_reopen()) if day == "saturday" else None
            schedule.every().sunday.at(end_time).do(make_reopen()) if day == "sunday" else None

    msg = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞—á."
    print(msg)
    logger.info(msg)
    send_telegram_message(f"‚ÑπÔ∏è <b>{msg}</b>")

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()

