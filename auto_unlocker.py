"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞ TTLock –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ .env (client_id, client_secret, username, password, lock_id, telegram).
–ï—Å–ª–∏ lock_id –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram –∏ –ø–∏—à—É—Ç—Å—è –≤ –ª–æ–≥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (14 –¥–Ω–µ–π).
"""
import requests
import json
import time as time_module
import hashlib
import urllib3
import schedule
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import logging
from logging.handlers import TimedRotatingFileHandler
import ttlock_api
from typing import Optional, Dict, List, Any, Union
import re
from telegram_utils import send_telegram_message, log_message, load_config, save_config, send_email_notification, log_exception
import sys
import traceback

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ ENV_PATH, –∏–Ω–∞—á–µ env/.env
ENV_PATH = os.getenv('ENV_PATH') or 'env/.env'
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(ENV_PATH)

# –£—Ä–æ–≤–µ–Ω—å –æ—Ç–ª–∞–¥–∫–∏
DEBUG = os.getenv('DEBUG', '0').lower() in ('1', 'true', 'yes')

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# TTLock API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
client_id = os.getenv("TTLOCK_CLIENT_ID")
client_secret = os.getenv("TTLOCK_CLIENT_SECRET")
username = os.getenv("TTLOCK_USERNAME")
password = os.getenv("TTLOCK_PASSWORD")

# Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")

# Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
EMAIL_TO = os.getenv("EMAIL_TO")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = os.getenv("SMTP_PORT")
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
AUTHORIZED_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
TTLOCK_LOCK_ID = os.getenv("TTLOCK_LOCK_ID")
CONFIG_PATH = os.getenv("CONFIG_PATH", "config.json")

REQUIRED_ENV_VARS = [
    'TTLOCK_CLIENT_ID',
    'TTLOCK_CLIENT_SECRET',
    'TTLOCK_USERNAME',
    'TTLOCK_PASSWORD',
    'TELEGRAM_BOT_TOKEN',
    'TELEGRAM_CHAT_ID',
    'EMAIL_TO',
    'SMTP_SERVER',
    'SMTP_PORT',
    'SMTP_USER',
    'SMTP_PASSWORD',
]

missing_vars = [var for var in REQUIRED_ENV_VARS if not os.getenv(var)]
if missing_vars:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    # –∏–ª–∏ print, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç.
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ª–æ–≥–≥–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ—ç—Ç–æ–º—É print –æ–ø—Ä–∞–≤–¥–∞–Ω.
    print(f"[CRITICAL] –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logger = logging.getLogger("auto_unlocker")
logger.setLevel(logging.DEBUG if DEBUG else logging.INFO) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç DEBUG

handler = TimedRotatingFileHandler('logs/auto_unlocker.log', when="midnight", backupCount=14, encoding="utf-8")
formatter = ttlock_api.TZFormatter('%(asctime)s %(levelname)s: %(message)s', '%Y-%m-%d %H:%M:%S')
handler.setFormatter(formatter)
logger.handlers.clear()
logger.addHandler(handler)

# –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤ stdout –¥–ª—è Docker
console = logging.StreamHandler(sys.stdout)
console.setFormatter(formatter)
logger.addHandler(console)

if DEBUG:
    logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Ç—å –∫ .env: {ENV_PATH}")

if not all([client_id, client_secret, username, password]):
    logger.critical("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TTLOCK_CLIENT_ID, TTLOCK_CLIENT_SECRET, TTLOCK_USERNAME, TTLOCK_PASSWORD. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TTLOCK_CLIENT_ID, TTLOCK_CLIENT_SECRET, TTLOCK_USERNAME, TTLOCK_PASSWORD. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª!")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è lock_id, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
LOCK_ID = None

LOG_FILENAME = "logs/auto_unlocker.log"

def execute_lock_action_with_retries(action_func, token: str, lock_id: str, action_name: str, success_msg: str, failure_msg_part: str) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–º–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.

    Args:
        action_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ (ttlock_api.unlock_lock –∏–ª–∏ ttlock_api.lock_lock).
        token: –¢–æ–∫–µ–Ω TTLock API.
        lock_id: ID –∑–∞–º–∫–∞.
        action_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ—Ç–∫—Ä—ã—Ç–∏—è").
        success_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤ –∏ Telegram –ø—Ä–∏ —É—Å–ø–µ—Ö–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ—Ç–∫—Ä—ã—Ç").
        failure_msg_part: –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–±–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞").

    Returns:
        True, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    # –ó–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: 30—Å, 1–º, 5–º, 10–º, –∏ 5 —Ä–∞–∑ –ø–æ 15–º
    delays = [30, 60, 5 * 60, 10 * 60] + [15 * 60] * 5
    total_attempts = len(delays) + 1
    last_error = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

    for attempt in range(1, total_attempts + 1):
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt} {action_name} –∑–∞–º–∫–∞...")
        response = action_func(token, lock_id, logger)

        if response and response.get("errcode") == 0:
            logger.info(f"–ó–∞–º–æ–∫ —É—Å–ø–µ—à–Ω–æ {success_msg}!")
            send_telegram_message(telegram_token, telegram_chat_id, f"‚úÖ <b>–ó–∞–º–æ–∫ —É—Å–ø–µ—à–Ω–æ {success_msg} (–ø–æ–ø—ã—Ç–∫–∞ #{attempt})</b>", logger)
            return True  # –£—Å–ø–µ—Ö

        last_error = response.get('errmsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ –ø–æ–ª—É—á–µ–Ω'
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 5-–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        if attempt == 5:
            msg = f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {failure_msg_part} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫. –û—Ç–ø—Ä–∞–≤–ª—è—é email."
            logger.warning(msg)
            send_telegram_message(telegram_token, telegram_chat_id, msg, logger)
            send_email_notification(
                subject=f"–ü—Ä–æ–±–ª–µ–º–∞ —Å TTLock: –ó–∞–º–æ–∫ {lock_id}",
                body=f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {failure_msg_part} –¥–ª—è –∑–∞–º–∫–∞ {lock_id} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫.\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
            )

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < total_attempts:
            delay = delays[attempt - 1]
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay // 60 if delay >= 60 else delay} {'–º–∏–Ω' if delay >= 60 else '—Å–µ–∫'} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time_module.sleep(delay)

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    final_error_msg = f"üî• <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:</b> –í—Å–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫ {action_name} –∑–∞–º–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
    logger.critical(final_error_msg)
    send_telegram_message(telegram_token, telegram_chat_id, final_error_msg, logger)
    send_email_notification(
        subject=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TTLock: –ó–∞–º–æ–∫ {lock_id} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        body=final_error_msg
    )

    return False  # –ü—Ä–æ–≤–∞–ª

def debug_request(name: str, url: str, data: Dict[str, Any], response: requests.Response) -> None:
    """
    –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        url: URL –∑–∞–ø—Ä–æ—Å–∞
        data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        response: –û—Ç–≤–µ—Ç requests
    """
    logger.debug(f"===== HTTP DEBUG: {name} =====")
    logger.debug(f"URL: {url}")
    logger.debug(f"Request Data: {json.dumps(data, ensure_ascii=False)}")
    logger.debug(f"Response Status: {response.status_code}")
    try:
        logger.debug(f"Response Body: {json.dumps(response.json(), ensure_ascii=False)}")
    except Exception:
        logger.debug(f"Response Body (not JSON): {response.text}")
    logger.debug("===== END HTTP DEBUG =====")

def resolve_lock_id(token: str) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å lock_id –∏–∑ .env, –ª–∏–±–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–º–∫–∞ –≤ —Å–ø–∏—Å–∫–µ.

    Args:
        token: access_token

    Returns:
        str: lock_id –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    lock_id_env = os.getenv("TTLOCK_LOCK_ID")
    if lock_id_env:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è lock_id –∏–∑ .env: {lock_id_env}")
        send_telegram_message(telegram_token, telegram_chat_id, f"‚ÑπÔ∏è lock_id –Ω–∞–π–¥–µ–Ω –≤ .env: <code>{lock_id_env}</code>", logger)
        return lock_id_env

    locks = ttlock_api.list_locks(token)
    if not locks:
        msg = "–ó–∞–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
        logger.error(msg)
        send_telegram_message(telegram_token, telegram_chat_id, f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –∑–∞–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>", logger)
        return None

    first_lock = locks[0]
    lock_id = first_lock.get('lockId')
    msg = f"lock_id –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω –≤ .env, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞: {lock_id}"
    logger.info(msg)
    send_telegram_message(telegram_token, telegram_chat_id, f"‚ÑπÔ∏è lock_id –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞: <code>{lock_id}</code>", logger)
    return lock_id

def job() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–º–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º LOCK_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    LOCK_ID = os.getenv('TTLOCK_LOCK_ID')

    logger.debug("-> job: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    now = ttlock_api.get_now()
    current_time = now.strftime("%H:%M")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    day_mapping = {
        "monday": "–ü–Ω",
        "tuesday": "–í—Ç",
        "wednesday": "–°—Ä",
        "thursday": "–ß—Ç",
        "friday": "–ü—Ç",
        "saturday": "–°–±",
        "sunday": "–í—Å"
    }
    current_day = day_mapping.get(now.strftime("%A").lower())

    logger.debug(f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_day}, –≤—Ä–µ–º—è: {current_time}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–∞–º–æ–∫
    cfg = load_config(CONFIG_PATH, logger, default={
        "timezone": "Asia/Krasnoyarsk",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        "schedule_enabled": True,
        "open_times": {
            "–ü–Ω": "09:01",
            "–í—Ç": "09:01",
            "–°—Ä": "09:01",
            "–ß—Ç": "09:01",
            "–ü—Ç": "09:01",
            "–°–±": "09:01",
            "–í—Å": "09:01"
        },
        "breaks": {
            "–ü–Ω": [],
            "–í—Ç": [],
            "–°—Ä": [],
            "–ß—Ç": [],
            "–ü—Ç": [],
            "–°–±": [],
            "–í—Å": []
        }
    })
    if not cfg.get("schedule_enabled", True):
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    open_time = cfg.get("open_times", {}).get(current_day)
    logger.debug(f"–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è {current_day} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {open_time}")
    if not open_time:
        logger.info(f"–î–ª—è {current_day} –Ω–µ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è, –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Ä—ã–≤ –ª–∏ —Å–µ–π—á–∞—Å
    breaks = cfg.get("breaks", {}).get(current_day, [])
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è {current_day}. –ü–µ—Ä–µ—Ä—ã–≤—ã: {breaks}")
    for break_time in breaks:
        start, end = break_time.split("-")
        if start <= current_time < end: # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `< end` –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            logger.info(f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ ({break_time}). –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–æ.")
            return

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è
    logger.debug(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ({current_time}) —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è ({open_time})")
    if current_time == open_time:
        logger.info("–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–≤–ø–∞–ª–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞.")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = ttlock_api.get_token(logger)
        if not token:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–º–∫–∞.")
            send_telegram_message(telegram_token, telegram_chat_id, "‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω TTLock</b>", logger)
            return

        # –ï—Å–ª–∏ LOCK_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
        if not LOCK_ID:
            logger.error("LOCK_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            send_telegram_message(telegram_token, telegram_chat_id, "‚ùóÔ∏è <b>–û—à–∏–±–∫–∞: LOCK_ID –Ω–µ –∑–∞–¥–∞–Ω</b>", logger)
            return

        execute_lock_action_with_retries(
            action_func=ttlock_api.unlock_lock,
            token=token,
            lock_id=LOCK_ID,
            action_name="–æ—Ç–∫—Ä—ã—Ç–∏—è",
            success_msg="–æ—Ç–∫—Ä—ã—Ç",
            failure_msg_part="–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞"
        )
    else:
        logger.debug("–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–æ. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def log_heartbeat():
    """–õ–æ–≥–∏—Ä—É–µ—Ç '—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ' –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    logger.debug("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞—á...")

def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    """
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ auto_unlocker...")
    send_telegram_message(telegram_token, telegram_chat_id, "üöÄ <b>–°–µ—Ä–≤–∏—Å auto_unlocker –∑–∞–ø—É—â–µ–Ω</b>", logger)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    token = ttlock_api.get_token(logger)
    if not token:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TTLock."
        logger.critical(msg)
        send_telegram_message(telegram_token, telegram_chat_id, f"üî• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b> {msg}", logger)
        send_email_notification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TTLock", msg)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º lock_id
    lock_id = resolve_lock_id(token)
    if not lock_id:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å lock_id. –°–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        logger.critical(msg)
        send_telegram_message(telegram_token, telegram_chat_id, f"üî• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b> {msg}", logger)
        send_email_notification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ TTLock", msg)
        return

    global LOCK_ID
    LOCK_ID = lock_id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cfg = load_config(CONFIG_PATH, logger)
    if not cfg:
        msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_PATH}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        logger.warning(msg)
        send_telegram_message(telegram_token, telegram_chat_id, f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> {msg}", logger)
        cfg = {} # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    tz_str = cfg.get("timezone", "Asia/Krasnoyarsk")
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.environ['TZ'] = tz_str
        time_module.tzset()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_str}")
        send_telegram_message(telegram_token, telegram_chat_id, f"‚öôÔ∏è –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>{tz_str}</code>", logger)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {tz_str}: {e}")
        send_telegram_message(telegram_token, telegram_chat_id, f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:</b> {tz_str}", logger)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    schedule.clear() # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

    schedule_enabled = cfg.get("schedule_enabled", True)
    if not schedule_enabled:
        logger.warning("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ó–∞–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        send_telegram_message(telegram_token, telegram_chat_id, "üö´ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.</b> –ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.", logger)
    else:
        open_times = cfg.get("open_times", {})
        breaks = cfg.get("breaks", {})

        for day_name, open_time in open_times.items():
            if open_time:
                # –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
                logger.info(f"–ü–ª–∞–Ω–∏—Ä—É—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ {day_name} –≤ {open_time}")
                day_schedule = getattr(schedule.every(), day_name.lower())
                day_schedule.at(open_time).do(job)

                # –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –ø–µ—Ä–µ—Ä—ã–≤–∞–º
                day_breaks = breaks.get(day_name, [])
                if day_breaks:
                    logger.info(f"–î–ª—è {day_name} –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ—Ä—ã–≤—ã: {day_breaks}")
                for break_time in day_breaks:
                    start_break, end_break = break_time.split('-')

                    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
                    logger.info(f"–ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ {day_name} –≤ {start_break} (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–∞)")

                    def make_close(day=day_name):
                        def _close():
                            logger.info(f"–ü–µ—Ä–µ—Ä—ã–≤ ({day}). –ó–∞–∫—Ä—ã–≤–∞—é –∑–∞–º–æ–∫.")
                            token_close = ttlock_api.get_token(logger)
                            if token_close:
                                execute_lock_action_with_retries(
                                    action_func=ttlock_api.lock_lock,
                                    token=token_close,
                                    lock_id=LOCK_ID,
                                    action_name="–∑–∞–∫—Ä—ã—Ç–∏—è",
                                    success_msg="–∑–∞–∫—Ä—ã—Ç –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤",
                                    failure_msg_part="–∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤"
                                )
                        return _close

                    day_schedule_close = getattr(schedule.every(), day_name.lower())
                    day_schedule_close.at(start_break).do(make_close(day=day_name))

                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
                    logger.info(f"–ü–ª–∞–Ω–∏—Ä—É—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ {day_name} –≤ {end_break} (–∫–æ–Ω–µ—Ü –ø–µ—Ä–µ—Ä—ã–≤–∞)")
                    def make_reopen(day=day_name):
                        def _open():
                            logger.info(f"–ü–µ—Ä–µ—Ä—ã–≤ ({day}) –æ–∫–æ–Ω—á–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–æ–∫.")
                            token_open = ttlock_api.get_token(logger)
                            if token_open:
                                execute_lock_action_with_retries(
                                    action_func=ttlock_api.unlock_lock,
                                    token=token_open,
                                    lock_id=LOCK_ID,
                                    action_name="–æ—Ç–∫—Ä—ã—Ç–∏—è",
                                    success_msg="–æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞",
                                    failure_msg_part="–æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–º–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"
                                )
                        return _open

                    day_schedule_open = getattr(schedule.every(), day_name.lower())
                    day_schedule_open.at(end_break).do(make_reopen(day=day_name))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ "—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏—è" –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    schedule.every(10).minutes.do(log_heartbeat)

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞—á.")
    send_telegram_message(telegram_token, telegram_chat_id, "‚úÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.</b>", logger)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        schedule.run_pending()
        time_module.sleep(1)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        log_exception(logger)
        send_email_notification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ auto_unlocker", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n\n{traceback.format_exc()}")
        raise

